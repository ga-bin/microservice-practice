server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"

  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
# circuitbreaker를 사용하기 위한 openfeign설정
# openfeign은 주로 microservices들 간 restapi호출 코드를 간단하게 작성하기 위해서 사용하는 것이지 circuitbreaker구현이 주 목적이 아님
  cloud:
    openfeign:
      circuitbreaker: 
        enabled: true


# resilience4j의 circuitbreaker패턴을 위한 설정
resilience4j.circuitbreaker: 
  configs:
    default:
      slidingWindowSize: 10 # 최근 몇 개의 요청을 기준으로 회로 차단기의 상태를 판별할껀지
      permittedNumberOfCallsInHalfOpenState: 2 # haltOpenState에서 몇 개의 요청을 허가할건지
      failureRateThreshold: 50 # 회로차단기가 열림 상태로 적용되는 임계값(여기서는 50%)
      waitDurationInOpenState: 10000 # 회로 차단기가 열림 상태가 된 후 몇 초동안 열림 상태를 유지할 것인지

# resilience4j의 retry 패턴을 위한 설정
resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException # nullpointerexception 상황에서는 retry를 하지 않음
      retryExceptions:
        - java.util.concurrent.TimeoutException # 설정한 exception에 대해서만 retry함
                                                # 따라서 retryException을 설정한 경우 ignoreExceptions을 설정할 필요없음(나머지 exception은 전부 무시하기 때문)

# rate limiter 패턴
resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000 #  요청이 수락될 때까지 기다리는 최대 시간
      limitRefreshPeriod: 5000 # 요청 제한이 새로 고침되는 주기
      limitForPeriod: 1 # limitFreshPeriod동안 허용되는 최대 요청 수
      

management:                      
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true      
  info:
    env:
      enabled: true



eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Eaxy Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG